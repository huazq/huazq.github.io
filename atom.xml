<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>huazq&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://huazq.github.io/"/>
  <updated>2019-08-13T09:18:52.900Z</updated>
  <id>https://huazq.github.io/</id>
  
  <author>
    <name>huazq</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>虚拟机性能优化</title>
    <link href="https://huazq.github.io/2019/08/13/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>https://huazq.github.io/2019/08/13/虚拟机性能优化/</id>
    <published>2019-08-13T07:00:00.000Z</published>
    <updated>2019-08-13T09:18:52.900Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-CPU优化"><a href="#一-CPU优化" class="headerlink" title="一.CPU优化"></a>一.CPU优化</h2><p>提升虚拟机cpu性能的手段，包括<strong>CPU透传</strong>, <strong>CPU缓存</strong>, <strong>CPU亲和性</strong>以及<strong>CPU线程调度策略</strong></p><h3 id="1-CPU透传"><a href="#1-CPU透传" class="headerlink" title="1.CPU透传"></a>1.CPU透传</h3><p>CPU透传是指将host的CPU信息对guest可见，由于guest中某些软件算法会依赖特定的CPU指令，通过透传可以提高这些软件算法的性能，libvirt中CPU透传的配置如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cpu</span> <span class="attr">mode</span>=<span class="string">'host-passthrough'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cache</span> <span class="attr">mode</span>=<span class="string">'passthrough'</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">feature</span> <span class="attr">policy</span>=<span class="string">'disable'</span> <span class="attr">name</span>=<span class="string">'lahf_lm'</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cpu</span>&gt;</span></span><br></pre></td></tr></table></figure><p>cache mode设置为passthrough，意味着通过将host的cache信息透传给虚拟机，虽然cpu是透传模式，但也可以配置cpu的某些feature是启用还是禁用。</p><h3 id="2-CPU亲和性"><a href="#2-CPU亲和性" class="headerlink" title="2.CPU亲和性"></a>2.CPU亲和性</h3><p>CPU亲和性是指将vcpu、qemu主线程、io线程绑定到某个或某些物理cpu上，减少cpu调度，提高虚拟机的性能，CPU亲和性在libvirt中配置如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cputune</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">vcpupin</span> <span class="attr">vcpu</span>=<span class="string">'0'</span> <span class="attr">cpuset</span>=<span class="string">'0'</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">vcpupin</span> <span class="attr">vcpu</span>=<span class="string">'1'</span> <span class="attr">cpuset</span>=<span class="string">'1'</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">emulatorpin</span> <span class="attr">cpuset</span>=<span class="string">'1'</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">iothreadpin</span> <span class="attr">iothread</span>=<span class="string">'1'</span> <span class="attr">cpuset</span>=<span class="string">'2'</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">iothreadpin</span> <span class="attr">iothread</span>=<span class="string">'2'</span> <span class="attr">cpuset</span>=<span class="string">'3'</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cputune</span>&gt;</span></span><br></pre></td></tr></table></figure><p>vcpupin是指将指定vcpu绑定到指定的cpuset上，emulatorpin以及iothreadpin的绑定方式也是如此</p><h4 id="3-CPU线程调度策略"><a href="#3-CPU线程调度策略" class="headerlink" title="3.CPU线程调度策略"></a>3.CPU线程调度策略</h4><p>CPU调度策略是指通过调度sched_setscheduler设置指定线程的调度策略，以及调度优先级，cpu调度策略在libvirt中配置如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cputune</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">vcpusched</span> <span class="attr">vcpus</span>=<span class="string">'0'</span> <span class="attr">scheduler</span>=<span class="string">'fifo'</span> <span class="attr">priority</span>=<span class="string">'0'</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">vcpusched</span> <span class="attr">vcpus</span>=<span class="string">'1'</span> <span class="attr">scheduler</span>=<span class="string">'fifo'</span> <span class="attr">priority</span>=<span class="string">'0'</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">iothreadsched</span> <span class="attr">iothreads</span>=<span class="string">'1'</span> <span class="attr">scheduler</span>=<span class="string">'rr'</span> <span class="attr">priority</span>=<span class="string">'0'</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">iothreadsched</span> <span class="attr">iothreads</span>=<span class="string">'2'</span> <span class="attr">scheduler</span>=<span class="string">'rr'</span> <span class="attr">priority</span>=<span class="string">'0'</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">iothreadsched</span> <span class="attr">iothreads</span>=<span class="string">'3'</span> <span class="attr">scheduler</span>=<span class="string">'rr'</span> <span class="attr">priority</span>=<span class="string">'0'</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">emulatorsched</span> <span class="attr">scheduler</span>=<span class="string">'rr'</span> <span class="attr">priority</span>=<span class="string">'0'</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cputune</span>&gt;</span></span><br></pre></td></tr></table></figure><p>libvirt支持的调度策略包括以下几个:<br>none表示普通进程，采用cfs调度;<br>batch是普通进程调度策略的分化版本。采用分时策略，根据动态优先级(nice()API设置），分配CPU运算资源；<br>idle表示在系统空闲时才跑这类进程，优先级最低;<br>fifo表示先入先出调度算法，属于实时调度策略，相同优先级的任务先到先服务，高优先级的任务可以抢占低优先级的任务;<br>rr表示时间片轮转调度算法，也属于实时调度策略，使用 Roound-Robin算法，相同优先级的任务当用完时间片会被放到队列尾部，以保证公平性，同样，高优先级的任务可以抢占低优先级的任务。</p><h3 id="4-CPU-cache"><a href="#4-CPU-cache" class="headerlink" title="4.CPU cache"></a>4.CPU cache</h3><p>CPU cache功能是在Qemu v2.8.0-rc0开始合入qemu(<a href="https://git.qemu.org/?p=qemu.git;a=commit;h=14c985cffa6cb177fc01a163d8bcf227c104718c" target="_blank" rel="noopener">链接</a>)，可以通过”-cpu l3-cache=on”方式为虚拟机的cpu创建一个l3的cache,l3 cache的支持可以显著的减少IPI中断(一种cpu之间的中断)，原因是一些软件算法是基于硬件cache信息实现的, 例如在x86 kernel中, 当cpu1想在cpu2唤醒一个任务时, cpu1会触发一个resched IPI 中断，并且告诉cpu2如果不共享低级别缓存，就需要去唤醒这个任务. 相反，如果cpu2有低级别缓存， cpu1 可以直接访问cpu2的runqueue，从而不需要通过IPI中断.cpu cache在libvirt中的配置如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cachetune</span> <span class="attr">vcpus</span>=<span class="string">'0-3'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cache</span> <span class="attr">id</span>=<span class="string">'0'</span> <span class="attr">level</span>=<span class="string">'3'</span> <span class="attr">type</span>=<span class="string">'both'</span> <span class="attr">size</span>=<span class="string">'3'</span> <span class="attr">unit</span>=<span class="string">'MiB'</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cache</span> <span class="attr">id</span>=<span class="string">'1'</span> <span class="attr">level</span>=<span class="string">'3'</span> <span class="attr">type</span>=<span class="string">'both'</span> <span class="attr">size</span>=<span class="string">'3'</span> <span class="attr">unit</span>=<span class="string">'MiB'</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">monitor</span> <span class="attr">level</span>=<span class="string">'3'</span> <span class="attr">vcpus</span>=<span class="string">'1'</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">monitor</span> <span class="attr">level</span>=<span class="string">'3'</span> <span class="attr">vcpus</span>=<span class="string">'0-3'</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cachetune</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cachetune</span> <span class="attr">vcpus</span>=<span class="string">'4-5'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">monitor</span> <span class="attr">level</span>=<span class="string">'3'</span> <span class="attr">vcpus</span>=<span class="string">'4'</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">monitor</span> <span class="attr">level</span>=<span class="string">'3'</span> <span class="attr">vcpus</span>=<span class="string">'5'</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cachetune</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一-CPU优化&quot;&gt;&lt;a href=&quot;#一-CPU优化&quot; class=&quot;headerlink&quot; title=&quot;一.CPU优化&quot;&gt;&lt;/a&gt;一.CPU优化&lt;/h2&gt;&lt;p&gt;提升虚拟机cpu性能的手段，包括&lt;strong&gt;CPU透传&lt;/strong&gt;, &lt;strong&gt;CP
      
    
    </summary>
    
      <category term="虚拟化" scheme="https://huazq.github.io/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
      <category term="libvirt" scheme="https://huazq.github.io/tags/libvirt/"/>
    
  </entry>
  
  <entry>
    <title>虚拟机资源Qos分析</title>
    <link href="https://huazq.github.io/2019/08/10/%E8%99%9A%E6%8B%9F%E5%8C%96%E8%B5%84%E6%BA%90%E5%A4%8D%E7%94%A8/"/>
    <id>https://huazq.github.io/2019/08/10/虚拟化资源复用/</id>
    <published>2019-08-10T15:34:00.000Z</published>
    <updated>2019-08-14T06:41:47.481Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-虚拟机资源Qos"><a href="#一-虚拟机资源Qos" class="headerlink" title="一.虚拟机资源Qos"></a>一.虚拟机资源Qos</h2><p>虚拟化资源Qos在云计算场景中有着很重要的作用，可以支持虚拟机的弹性负载，提高硬件复用率，减少资源浪费， 降低企业成本等。虚拟机的资源Qos包括CPU，memory，IO，网络几个方面</p><h2 id="二-CPU-Qos"><a href="#二-CPU-Qos" class="headerlink" title="二.CPU Qos"></a>二.CPU Qos</h2><p>CPU Qos控制包括<strong>CPU 热插拔</strong>、<strong>CPU 份额</strong>、<strong>CPU 配额</strong>。</p><h3 id="1-CPU-热插拔"><a href="#1-CPU-热插拔" class="headerlink" title="1.CPU 热插拔"></a>1.CPU 热插拔</h3><p>cpu热插拔可以帮助虚拟机在高负载的情况下，不用停机直接通过热插拔cpu的方式为虚拟机进行弹性扩展，保证虚拟机里的业务稳定，虚拟化场景中配置cpu支持热插拔的xml格式如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">vcpu</span> <span class="attr">placement</span>=<span class="string">'static'</span> <span class="attr">current</span>=<span class="string">'3'</span>&gt;</span>6<span class="tag">&lt;/<span class="name">vcpu</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">vcpus</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">vcpu</span> <span class="attr">id</span>=<span class="string">'0'</span> <span class="attr">enabled</span>=<span class="string">'yes'</span> <span class="attr">hotpluggable</span>=<span class="string">'no'</span> <span class="attr">order</span>=<span class="string">'1'</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">vcpu</span> <span class="attr">id</span>=<span class="string">'1'</span> <span class="attr">enabled</span>=<span class="string">'no'</span> <span class="attr">hotpluggable</span>=<span class="string">'yes'</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">vcpu</span> <span class="attr">id</span>=<span class="string">'2'</span> <span class="attr">enabled</span>=<span class="string">'no'</span> <span class="attr">hotpluggable</span>=<span class="string">'yes'</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">vcpu</span> <span class="attr">id</span>=<span class="string">'3'</span> <span class="attr">enabled</span>=<span class="string">'no'</span> <span class="attr">hotpluggable</span>=<span class="string">'yes'</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">vcpu</span> <span class="attr">id</span>=<span class="string">'4'</span> <span class="attr">enabled</span>=<span class="string">'yes'</span> <span class="attr">hotpluggable</span>=<span class="string">'yes'</span> <span class="attr">order</span>=<span class="string">'2'</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">vcpu</span> <span class="attr">id</span>=<span class="string">'5'</span> <span class="attr">enabled</span>=<span class="string">'yes'</span> <span class="attr">hotpluggable</span>=<span class="string">'yes'</span> <span class="attr">order</span>=<span class="string">'3'</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">vcpus</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>vcpu</strong>元素中的<strong>current</strong>属性表示当前可以使用cpu的数量，6则表示支持的最大的cpu数量;<br><strong>vcpus</strong>元素中则是详细描述了每个cpu的控制状态:<strong>id</strong>值代表每个vcpu的id，这个值会在libvirt中被用作vcpu pining、调度信息以及numa分配，在某些情况下这个值可能和虚拟机看到的id不同，默认vcpu id从0开始;<strong>enabled</strong>表示在虚拟机启动的时候哪些cpu为随机启动，vcpu 0默认enabled=’yes’(虚拟机启动至少要有一个vcpu);<strong>hotpluggable</strong>表示当前vcpu是否允许热插拔，vcpu 0默认不支持热插拔; order代表vcpu在虚拟机中online的顺序(hypervisor可能会在某些操作中为了确保有效的配置而会清楚或更新order),其中vcpu的启动必须在vcpu0之后。<br>另外不是所有的hypervisor都支持cpu热插拔，还有的像PPC64这种平台的cpu热插，如果vcpu都在一个core上，则必须都需要enabled</p><h3 id="2-CPU份额"><a href="#2-CPU份额" class="headerlink" title="2.CPU份额"></a>2.CPU份额</h3><p>在linux内核中，默认所使用的进程调度器为cfs，cfs调度器会根据cgroup的cpu子系统下的每个cgroup子组的cpu.shares计算进程的weight值，cpu.shares的值是一个相对值，cfs是根据比例计算，默认所有进程的权重值是一样的(默认值1024)，即所有进程的权重比例为1:1:1…，虚拟化场景中，libvirtd启动后会在cpu子系统中建立一个名为machine.slice的文件夹(即代表一个子组)，之后在创建虚拟机的时候会在machine.slice下为虚拟机创建一个machine-qemu开头的文件夹，然后在这个文件夹下会为每个vcpu创建一个文件夹(会将每个vcpu线程加入对应的文件夹下的task)，同时还会创建一个emulator文件夹(将qemu中除了vcpu线程的其他线程加入到这个文件夹下的task中)，另外libvirt在创建虚拟机的时候支持为不同的虚拟机配置不同的cpu share值，这就决定了cfs在调度的时候通过获取每个虚拟机子组中cpu.shares值计算虚拟机的调度优先级，libvirt中配置如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cputune</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">shares</span>&gt;</span>2048<span class="tag">&lt;/<span class="name">shares</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cputune</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个值会写进为虚拟机创建machine-qemu开头文件夹下的cpu.shares里，vcpu与emulator的cpu.shares都是默认值1024，即表示qemu中所有线程在cfs调度器中的权重是一样的，但不同的qemu进程会由于shares值不同，导致在调度器的权重不同。</p><h3 id="3-CPU配额"><a href="#3-CPU配额" class="headerlink" title="3.CPU配额"></a>3.CPU配额</h3><p>CPU配额在libvirt中配置如下:<br>CPU配额表示限制cpu使用率，在cpu子系统下面有cpu.cfs_period_us和cpu.cfs_quota_us两个文件两个文件,cpu.cfs_period_us代表cpu分配的周期(微秒），默认为100000。cpu.cfs_quota_us表示该control group限制占用的时间（微秒），默认为-1，表示不限制。如果设为50000，表示占用50000/10000=50%的CPU。在libvirt中支持三中配置: vcpu配置配额，为整个虚拟机配置quota(即为整个qemu进程配置配额)，为io线程配置配额，配置方式如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cputune</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">period</span>&gt;</span>1000000<span class="tag">&lt;/<span class="name">period</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">quota</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">quota</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">global_period</span>&gt;</span>1000000<span class="tag">&lt;/<span class="name">global_period</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">global_quota</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">global_quota</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">iothread_period</span>&gt;</span>1000000<span class="tag">&lt;/<span class="name">iothread_period</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">iothread_quota</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">iothread_quota</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">emulator_period</span>&gt;</span>1000000<span class="tag">&lt;/<span class="name">emulator_period</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">emulator_quota</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">emulator_quota</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cputune</span>&gt;</span></span><br></pre></td></tr></table></figure><p>period/quota代表的是配置vcpu的配额，global_period/global_quota代表的是配置qemu整个进程(包括所有子线程)的配额，iothread_period/iothread_quota代表的是配置io线程的配额，libvirt支持配置iothread，iothread的作用是增加qemu中设备io的处理能力，emulator_period/emulator_quota代表的是qemu线程中除了vcpu线程外的其他线程的配额</p><h2 id="三-内存Qos"><a href="#三-内存Qos" class="headerlink" title="三.内存Qos"></a>三.内存Qos</h2><p>内存Qos包括<strong>内存热插拔</strong>、<strong>内存balloon</strong>、<strong>内存控制</strong></p><h3 id="1-内存热插拔"><a href="#1-内存热插拔" class="headerlink" title="1.内存热插拔"></a>1.内存热插拔</h3><p>内存热插拔和CPU热插拔类似，都是在虚拟机处于高内存负载的时候，通过热插拔内存，为虚拟机提供动态扩展，保证虚拟机的高可用。libvirt中内存热插拔的配置如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">maxMemory</span> <span class="attr">slots</span>=<span class="string">'16'</span> <span class="attr">unit</span>=<span class="string">'KiB'</span>&gt;</span>16777216表示支持的最大内存，memory表示当前可用内存，热插内存的时候需要主要slots<span class="tag">&lt;/<span class="name">maxMemory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">memory</span> <span class="attr">unit</span>=<span class="string">'KiB'</span>&gt;</span>1048576<span class="tag">&lt;/<span class="name">memory</span>&gt;</span></span><br></pre></td></tr></table></figure><p>maxMemory中的slots表示有16个内存插槽，16777216表示支持的最大内存，memory表示当前可用内存，热插内存的时候需要主要slots与最大内存两个条件都必须满足才能进行热插，如果热插了15根512M的内存，再热插一个1G的内存，虽然最大内存的上限仍未达到，但是插槽已经满了，仍然不能热插内存了</p><h3 id="2-内存balloon"><a href="#2-内存balloon" class="headerlink" title="2.内存balloon"></a>2.内存balloon</h3><p>内存balloon是通过给虚拟机增加一个virtio-balloon的设备，同时在虚拟机内安装virtio-balloon驱动，使用可以根据虚拟机配置动态的调账虚拟机可用内存，内存balloon在libvirt配置如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">memory</span> <span class="attr">unit</span>=<span class="string">'KiB'</span>&gt;</span>4194304<span class="tag">&lt;/<span class="name">memory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">currentMemory</span> <span class="attr">unit</span>=<span class="string">'KiB'</span>&gt;</span>1048576<span class="tag">&lt;/<span class="name">currentMemory</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当currentMemory小于memory时，qemut通过virtio-balloon设备将memory-currentMemory的差值发送给虚拟机中virtio-balloon驱动，virtio-balloon会根据差值做出相应的inflate或deflate操作(即释放或申请内存)</p><h3 id="3-内存控制"><a href="#3-内存控制" class="headerlink" title="3.内存控制"></a>3.内存控制</h3><p>内存控制是利用cgroup的memory子系统的能力达到限制虚拟机的内存使用，memory子系统下同样也是针对每个虚拟机有一个相应的machine-qemu开头的子组，通过更改虚拟机对应子组下面的soft_limit_in_bytes、limit_in_bytes、memsw.limit_in_bytes等参数，可以控制虚拟机的内存使用限制，libvirt中内存控制的配置如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">memtune</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hard_limit</span> <span class="attr">unit</span>=<span class="string">'KiB'</span>&gt;</span>2097152<span class="tag">&lt;/<span class="name">hard_limit</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">soft_limit</span> <span class="attr">unit</span>=<span class="string">'bytes'</span>&gt;</span>1048576<span class="tag">&lt;/<span class="name">soft_limit</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swap_hard_limit</span> <span class="attr">unit</span>=<span class="string">'KB'</span>&gt;</span>4194304<span class="tag">&lt;/<span class="name">swap_hard_limit</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">memtune</span>&gt;</span></span><br></pre></td></tr></table></figure><p>hard_limit表示虚拟机可以使用的物理内存的上限，因此hard_limit的值会写入到memory子系统的limit_in_bytes文件;<br>soft_limit表示当系统内存不足时，通过判断虚拟机的内存是否超过soft_limit确定是否需要回收虚拟机的内存，soft_limit的值会写入到soft_limit_in_bytes文件;<br>swap_hard_limit表示虚拟机可以使用包括物理内存和交换内存的总和的大小，swap_hard_limit的值会写入到memsw.limit_in_bytes文件，另外需要注意的是hard_limit必须小于等于swap_hard_limit，否则swap_hard_limit无法写入memsw.limit_in_bytes</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一-虚拟机资源Qos&quot;&gt;&lt;a href=&quot;#一-虚拟机资源Qos&quot; class=&quot;headerlink&quot; title=&quot;一.虚拟机资源Qos&quot;&gt;&lt;/a&gt;一.虚拟机资源Qos&lt;/h2&gt;&lt;p&gt;虚拟化资源Qos在云计算场景中有着很重要的作用，可以支持虚拟机的弹性负载，提
      
    
    </summary>
    
      <category term="虚拟化" scheme="https://huazq.github.io/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
      <category term="libvirt" scheme="https://huazq.github.io/tags/libvirt/"/>
    
  </entry>
  
  <entry>
    <title>eventfd分析</title>
    <link href="https://huazq.github.io/2019/08/08/eventfd%E5%88%86%E6%9E%90/"/>
    <id>https://huazq.github.io/2019/08/08/eventfd分析/</id>
    <published>2019-08-08T01:57:00.000Z</published>
    <updated>2019-08-08T03:23:17.436Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、-什么是eventfd"><a href="#一、-什么是eventfd" class="headerlink" title="一、 什么是eventfd"></a>一、 什么是eventfd</h2><p>eventfd是一种linux上的线程通信方式，和信号量等其他线程通信不同的是eventfd可以用于进程间的通信，还可以用于内核发信号给用户态的进程，eventfd是linux上的系统调用，本质上是用于事件通知。</p><h2 id="二、-eventfd特点"><a href="#二、-eventfd特点" class="headerlink" title="二、 eventfd特点"></a>二、 eventfd特点</h2><p>eventfd被设计为一个简单轻量级的文件描述符，支持在用户态作为事件进行wait和dispatch和在内核中作为事件进行dispatch，并且eventfd还可以在所有仅仅需要事件通知场景中替换pipe，并且eventfd相比于pipe在内核中开销更低，不需要消耗两个fd,当在kernel中，可以提供对fd-bridge的启用，类似 KAIO or syslets/threadlets这些功能一样通知一个fd完成某些操作，eventfd还支持epoll/poll/select的方式进行事件通知</p><h2 id="三、-eventfd原理分析"><a href="#三、-eventfd原理分析" class="headerlink" title="三、 eventfd原理分析"></a>三、 eventfd原理分析</h2><p>用户态进程通过eventfd()创建一个内核对象，这个内核对象包含一个由内核保持的无符号64位整型计数器。这个计数器由参数initval说明的值来初始化。用户态进程可以通过write/read去读写这个eventfd()返回的文件描述符，然后使用poll或select检测文件描述符的变化，继而达到事件的通知/响应机制。</p><h3 id="1-int-eventfd-unsigned-int-initval-int-flags"><a href="#1-int-eventfd-unsigned-int-initval-int-flags" class="headerlink" title="1. int eventfd(unsigned int initval, int flags);"></a>1. int eventfd(unsigned int initval, int flags);</h3><p>这个API的作用是用于产生一个文件描述符(致敬:Linux下一切皆文件)，可以对这个文件描述符进行read、write、poll、select等操作，接下来看下这个api的内核实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">SYSCALL_DEFINE2(eventfd2, <span class="keyword">unsigned</span> <span class="keyword">int</span>, count, <span class="keyword">int</span>, flags)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> fd, error;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">file</span>;</span></span><br><span class="line">    error = get_unused_fd_flags(flags &amp; EFD_SHARED_FCNTL_FLAGS);</span><br><span class="line">    <span class="keyword">if</span> (error &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> error;</span><br><span class="line">    fd = error;</span><br><span class="line"></span><br><span class="line">    file = eventfd_file_create(count, flags);</span><br><span class="line">    <span class="keyword">if</span> (IS_ERR(file)) &#123;</span><br><span class="line">        error = PTR_ERR(file);</span><br><span class="line">        <span class="keyword">goto</span> err_put_unused_fd;</span><br><span class="line">    &#125;</span><br><span class="line">    fd_install(fd, file);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fd;</span><br><span class="line"></span><br><span class="line">err_put_unused_fd:</span><br><span class="line">    put_unused_fd(fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SYSCALL_DEFINE1(eventfd, <span class="keyword">unsigned</span> <span class="keyword">int</span>, count)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> sys_eventfd2(count, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到代码本身就是创建一个文件描述符，这里说明下eventfd_file_create这个API：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct file *<span class="title">eventfd_file_create</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> count, <span class="keyword">int</span> flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">file</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">eventfd_ctx</span> *<span class="title">ctx</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Check the EFD_* constants for consistency.  */</span></span><br><span class="line">BUILD_BUG_ON(EFD_CLOEXEC != O_CLOEXEC);</span><br><span class="line">BUILD_BUG_ON(EFD_NONBLOCK != O_NONBLOCK);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (flags &amp; ~EFD_FLAGS_SET)</span><br><span class="line"><span class="keyword">return</span> ERR_PTR(-EINVAL);</span><br><span class="line"></span><br><span class="line">ctx = kmalloc(<span class="keyword">sizeof</span>(*ctx), GFP_KERNEL);</span><br><span class="line"><span class="keyword">if</span> (!ctx)</span><br><span class="line"><span class="keyword">return</span> ERR_PTR(-ENOMEM);</span><br><span class="line"></span><br><span class="line">kref_init(&amp;ctx-&gt;kref);</span><br><span class="line">init_waitqueue_head(&amp;ctx-&gt;wqh);</span><br><span class="line">ctx-&gt;count = count;</span><br><span class="line">ctx-&gt;flags = flags;</span><br><span class="line"></span><br><span class="line">file = anon_inode_getfile(<span class="string">"[eventfd]"</span>, &amp;eventfd_fops, ctx,</span><br><span class="line">  O_RDWR | (flags &amp; EFD_SHARED_FCNTL_FLAGS));</span><br><span class="line"><span class="keyword">if</span> (IS_ERR(file))</span><br><span class="line">eventfd_free_ctx(ctx);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> file;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里创建了eventfd_ctx结构，这个结构就是用来存储可以被read/write的计数器count以及后面会用到的flags，同时ctx里还有个wqh变量，这个就是等待队列，等待队列的作用就是当进程需要阻塞的时候挂在对应evnetfd的等待队列，然后调用anon_inode_getfile创建一个file结构(anon_inode_getfile的实现这里暂不多讲)，同时把eventfd_ctx作为file结构的private_data，同时关联eventfd自身的文件操作结构体eventfd_fops。</p><h3 id="2-static-ssize-t-eventfd-read-struct-file-file-char-user-buf-size-t-count-loff-t-ppos"><a href="#2-static-ssize-t-eventfd-read-struct-file-file-char-user-buf-size-t-count-loff-t-ppos" class="headerlink" title="2. static ssize_t eventfd_read(struct file *file, char __user *buf, size_t count, loff_t *ppos)"></a>2. static ssize_t eventfd_read(struct file *file, char __user *buf, size_t count, loff_t *ppos)</h3><p>这个API用于读取count值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">eventfd_read</span><span class="params">(struct file *file, <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> count,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">loff_t</span> *ppos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">eventfd_ctx</span> *<span class="title">ctx</span> = <span class="title">file</span>-&gt;<span class="title">private_data</span>;</span></span><br><span class="line"><span class="keyword">ssize_t</span> res;</span><br><span class="line">__u64 cnt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (count &lt; <span class="keyword">sizeof</span>(cnt))</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line">res = eventfd_ctx_read(ctx, file-&gt;f_flags &amp; O_NONBLOCK, &amp;cnt);</span><br><span class="line"><span class="keyword">if</span> (res &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> put_user(cnt, (__u64 __user *) buf) ? -EFAULT : <span class="keyword">sizeof</span>(cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">ssize_t</span> eventfd_ctx_read(struct eventfd_ctx *ctx, <span class="keyword">int</span> no_wait, __u64 *cnt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">ssize_t</span> res;</span><br><span class="line">DECLARE_WAITQUEUE(wait, current);</span><br><span class="line"></span><br><span class="line">spin_lock_irq(&amp;ctx-&gt;wqh.lock);</span><br><span class="line">*cnt = <span class="number">0</span>;</span><br><span class="line">res = -EAGAIN;</span><br><span class="line"><span class="keyword">if</span> (ctx-&gt;count &gt; <span class="number">0</span>)</span><br><span class="line">res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!no_wait) &#123;</span><br><span class="line">__add_wait_queue(&amp;ctx-&gt;wqh, &amp;wait);</span><br><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">set_current_state(TASK_INTERRUPTIBLE);</span><br><span class="line"><span class="keyword">if</span> (ctx-&gt;count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (signal_pending(current)) &#123;</span><br><span class="line">res = -ERESTARTSYS;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">spin_unlock_irq(&amp;ctx-&gt;wqh.lock);</span><br><span class="line">schedule();</span><br><span class="line">spin_lock_irq(&amp;ctx-&gt;wqh.lock);</span><br><span class="line">&#125;</span><br><span class="line">__remove_wait_queue(&amp;ctx-&gt;wqh, &amp;wait);</span><br><span class="line">__set_current_state(TASK_RUNNING);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (likely(res == <span class="number">0</span>)) &#123;</span><br><span class="line">eventfd_ctx_do_read(ctx, cnt);</span><br><span class="line"><span class="keyword">if</span> (waitqueue_active(&amp;ctx-&gt;wqh))</span><br><span class="line">wake_up_locked_poll(&amp;ctx-&gt;wqh, POLLOUT);</span><br><span class="line">&#125;</span><br><span class="line">spin_unlock_irq(&amp;ctx-&gt;wqh.lock);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">eventfd_ctx_do_read</span><span class="params">(struct eventfd_ctx *ctx, __u64 *cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">*cnt = (ctx-&gt;flags &amp; EFD_SEMAPHORE) ? <span class="number">1</span> : ctx-&gt;count;</span><br><span class="line">ctx-&gt;count -= *cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在eventfd_read里先判断请求buf的size是否满足条件，这里count是64位即8个字节，所以最小读取8个字节。然后调用eventfd_ctx_read获取eventfd_ctx中的count计数，并清零，如果读取有问题则返回，否则把值写入到用户空间。</p><p>这里着重说一下eventfd_ctx_read:首先调用DECLARE_WAITQUEUE(wait, current)初始化一个wait_queue_t对象wait，之后对eventfd_ctx加锁(由于可能存在并发读取)。往下走会判断count是否大于0，如果大于0则res=0，否则返回res(默认值为-EAGAIN)，接下来看看传递进来的参数标志，如果设置了O_NONBLOCK，则就不需要等待，直接返回res(这里返回的res是小于0的情况)。如果没有指定O_NONBLOCK标志，此时由于读取不到count值（count值为0），就阻塞。然后调用__add_wait_queue把把自己加入到等待队列中，该队列会在进程等待的条件满足时唤醒它。加入到队列后进入一个死循环，设置当前进程状态为TASK_INTERRUPTIBLE，并不断检查count值，如果count大于0了，意味着有信号了，就设置res=0,然后break，然后把进程从等待队列去掉，然后设置状态TASK_RUNNING。如果count值为0，则检查是否有挂起的信号，如果有信号，同样需要先对信号进行处理,不过这次读应该就是返回失败了。之后调用调度器进行调度。如果发生了write的动作，count值会大于0，这是就会置res=0并break出去，然后会对count值进行读取。具体读取通过eventfd_ctx_do_read函数，该函数很简单， 先判断有没有指定EFD_SEMAPHORE标志，如果指定了则一次只返回1,，没有就返回count值。然后对count做减法，如果没有指定EFD_SEMAPHORE标志，实际上减去之后就为0了，有的话就减去1。之前如果有在该eventfd上阻塞的write进程，现在就可以唤醒了，所以这里检查了下，如果等待队列还有进程，则调用wake_up_locked_poll对对应的进程进行唤醒。</p><h3 id="3-static-ssize-t-eventfd-write-struct-file-file-const-char-user-buf-size-t-count-loff-t-ppos"><a href="#3-static-ssize-t-eventfd-write-struct-file-file-const-char-user-buf-size-t-count-loff-t-ppos" class="headerlink" title="3.static ssize_t eventfd_write(struct file *file, const char __user *buf, size_t count, loff_t *ppos)"></a>3.static ssize_t eventfd_write(struct file *file, const char __user *buf, size_t count, loff_t *ppos)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">eventfd_write</span><span class="params">(struct file *file, <span class="keyword">const</span> <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> count,</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">loff_t</span> *ppos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">eventfd_ctx</span> *<span class="title">ctx</span> = <span class="title">file</span>-&gt;<span class="title">private_data</span>;</span></span><br><span class="line"><span class="keyword">ssize_t</span> res;</span><br><span class="line">__u64 ucnt;</span><br><span class="line">DECLARE_WAITQUEUE(wait, current);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (count &lt; <span class="keyword">sizeof</span>(ucnt))</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line"><span class="keyword">if</span> (copy_from_user(&amp;ucnt, buf, <span class="keyword">sizeof</span>(ucnt)))</span><br><span class="line"><span class="keyword">return</span> -EFAULT;</span><br><span class="line"><span class="keyword">if</span> (ucnt == ULLONG_MAX)</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line">spin_lock_irq(&amp;ctx-&gt;wqh.lock);</span><br><span class="line">res = -EAGAIN;</span><br><span class="line"><span class="keyword">if</span> (ULLONG_MAX - ctx-&gt;count &gt; ucnt)</span><br><span class="line">res = <span class="keyword">sizeof</span>(ucnt);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!(file-&gt;f_flags &amp; O_NONBLOCK)) &#123;</span><br><span class="line">__add_wait_queue(&amp;ctx-&gt;wqh, &amp;wait);</span><br><span class="line"><span class="keyword">for</span> (res = <span class="number">0</span>;;) &#123;</span><br><span class="line">set_current_state(TASK_INTERRUPTIBLE);</span><br><span class="line"><span class="keyword">if</span> (ULLONG_MAX - ctx-&gt;count &gt; ucnt) &#123;</span><br><span class="line">res = <span class="keyword">sizeof</span>(ucnt);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (signal_pending(current)) &#123;</span><br><span class="line">res = -ERESTARTSYS;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">spin_unlock_irq(&amp;ctx-&gt;wqh.lock);</span><br><span class="line">schedule();</span><br><span class="line">spin_lock_irq(&amp;ctx-&gt;wqh.lock);</span><br><span class="line">&#125;</span><br><span class="line">__remove_wait_queue(&amp;ctx-&gt;wqh, &amp;wait);</span><br><span class="line">__set_current_state(TASK_RUNNING);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (likely(res &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">ctx-&gt;count += ucnt;</span><br><span class="line"><span class="keyword">if</span> (waitqueue_active(&amp;ctx-&gt;wqh))</span><br><span class="line">wake_up_locked_poll(&amp;ctx-&gt;wqh, POLLIN);</span><br><span class="line">&#125;</span><br><span class="line">spin_unlock_irq(&amp;ctx-&gt;wqh.lock);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个API和上面的eventfd_ctx_read大致类型，先创建wait,然后判断count是不是小于8位 ，之后copy用户态传过来的值到ucnt，并判断ucnt是否等于ULLONG_MAX, 初始化res为-EAGAIN，再往下判断ucnt+ctx-&gt;count是否小于ULLONG_MAX，小于的话设置res=sizeof(ucnt)，并且把ucnt加到ctx-&gt;count上，然后唤醒read进程，并返回，如果ULLONG_MAX小于ucnt+ctx-&gt;count，则加入等待队列，设置当前进程状态为TASK_INTERRUPTIBLE，并不断检查ucnt+ctx-&gt;count是否小于ULLONG_MAX，如果ucnt+ctx-&gt;count小于ULLONG_MAX(即eventfd_read被调用了)，则设置res=sizeof(ucnt)并break出去，并且把ucnt加到ctx-&gt;count上，然后唤醒等待队列的进程，如果等待期间有信号进来，同样需要先对信号进行处理。</p><h3 id="4-u64-eventfd-signal-struct-eventfd-ctx-ctx-u64-n"><a href="#4-u64-eventfd-signal-struct-eventfd-ctx-ctx-u64-n" class="headerlink" title="4.__u64 eventfd_signal(struct eventfd_ctx *ctx, __u64 n)"></a>4.__u64 eventfd_signal(struct eventfd_ctx *ctx, __u64 n)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">u64 <span class="title">eventfd_signal</span><span class="params">(struct eventfd_ctx *ctx, __u64 n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</span><br><span class="line"></span><br><span class="line">spin_lock_irqsave(&amp;ctx-&gt;wqh.lock, flags);</span><br><span class="line"><span class="keyword">if</span> (ULLONG_MAX - ctx-&gt;count &lt; n)</span><br><span class="line">n = ULLONG_MAX - ctx-&gt;count;</span><br><span class="line">ctx-&gt;count += n;</span><br><span class="line"><span class="keyword">if</span> (waitqueue_active(&amp;ctx-&gt;wqh))</span><br><span class="line">wake_up_locked_poll(&amp;ctx-&gt;wqh, POLLIN);</span><br><span class="line">spin_unlock_irqrestore(&amp;ctx-&gt;wqh.lock, flags);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 该函数一般在内核中经常用到(例如vhost),用户内核通知用户态，和eventf_write函数类似，只不过没有阻塞，这里有点不同的是如果传进来的n+ctx-&gt;count大于ULLONG_MAX，则置n=ULLONG_MAX-ctx-&gt;count，之后设置ctx-&gt;count+=n，之后就是唤醒等待队列的进程了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、-什么是eventfd&quot;&gt;&lt;a href=&quot;#一、-什么是eventfd&quot; class=&quot;headerlink&quot; title=&quot;一、 什么是eventfd&quot;&gt;&lt;/a&gt;一、 什么是eventfd&lt;/h2&gt;&lt;p&gt;eventfd是一种linux上的线程通信方式，和信
      
    
    </summary>
    
      <category term="内核" scheme="https://huazq.github.io/categories/%E5%86%85%E6%A0%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>tmpfs介绍</title>
    <link href="https://huazq.github.io/2019/08/07/tmpfs%E4%BB%8B%E7%BB%8D/"/>
    <id>https://huazq.github.io/2019/08/07/tmpfs介绍/</id>
    <published>2019-08-07T10:46:00.000Z</published>
    <updated>2019-08-07T10:51:39.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、-什么是tmpfs"><a href="#一、-什么是tmpfs" class="headerlink" title="一、 什么是tmpfs"></a>一、 什么是tmpfs</h1><p>tmpfs是一种基于内存的文件系统，和ramdisk比较类似，但不同的是，ramdisk只能使用RAM，但tmpfs也可以使用swap分区来存储。而且ramdisk创建后是个块设备，需要用mkfs指定文件系统格式化这个块设备，才能使用它；而tmpfs仅仅是一个文件系统，并不是块设备，直接使用mount命令就可以挂盘这个文件系统了。tmpfs是一个不错的基于RAM的文件系统。</p><h1 id="二、-tmpfs优劣"><a href="#二、-tmpfs优劣" class="headerlink" title="二、 tmpfs优劣"></a>二、 tmpfs优劣</h1><h6 id="1-由于内存使用采用的是POD机制，所以在使用tmpfs时也是动态增长"><a href="#1-由于内存使用采用的是POD机制，所以在使用tmpfs时也是动态增长" class="headerlink" title="1. 由于内存使用采用的是POD机制，所以在使用tmpfs时也是动态增长"></a>1. 由于内存使用采用的是POD机制，所以在使用tmpfs时也是动态增长</h6><h6 id="2-因为是基于内存读写的，所以速度特别快"><a href="#2-因为是基于内存读写的，所以速度特别快" class="headerlink" title="2. 因为是基于内存读写的，所以速度特别快"></a>2. 因为是基于内存读写的，所以速度特别快</h6><h6 id="3-内存是一个非持久化存储，断电后，tmpfs数据都会丢失"><a href="#3-内存是一个非持久化存储，断电后，tmpfs数据都会丢失" class="headerlink" title="3. 内存是一个非持久化存储，断电后，tmpfs数据都会丢失"></a>3. 内存是一个非持久化存储，断电后，tmpfs数据都会丢失</h6><h1 id="三、-如何使用tmpfs"><a href="#三、-如何使用tmpfs" class="headerlink" title="三、 如何使用tmpfs"></a>三、 如何使用tmpfs</h1><p>如果要启用tmpfs，需要在内核配置时，启用“Virtual memory file system support”</p><h5 id="1-直接mount，tmpfs并不是基于块设备的-，所以一个简单的-mount-命令就可以创建-tmpfs-文件系统了-在这里我们创建了一个目录，并挂载tmpfs到这个目录"><a href="#1-直接mount，tmpfs并不是基于块设备的-，所以一个简单的-mount-命令就可以创建-tmpfs-文件系统了-在这里我们创建了一个目录，并挂载tmpfs到这个目录" class="headerlink" title="1. 直接mount，tmpfs并不是基于块设备的 ，所以一个简单的 mount 命令就可以创建 tmpfs 文件系统了,在这里我们创建了一个目录，并挂载tmpfs到这个目录"></a>1. 直接mount，tmpfs并不是基于块设备的 ，所以一个简单的 mount 命令就可以创建 tmpfs 文件系统了,在这里我们创建了一个目录，并挂载tmpfs到这个目录</h5><h6 id="mkdir-p-mnt-tmpfs"><a href="#mkdir-p-mnt-tmpfs" class="headerlink" title="mkdir -p /mnt/tmpfs"></a>mkdir -p /mnt/tmpfs</h6><h6 id="mount-tmpfs-mnt-tmpfs-t-tmpfs"><a href="#mount-tmpfs-mnt-tmpfs-t-tmpfs" class="headerlink" title="mount tmpfs /mnt/tmpfs -t tmpfs"></a>mount tmpfs /mnt/tmpfs -t tmpfs</h6><h5 id="2-使用-dev-shm-，-dev-shm-是linux下一个非常有用的目录，这个目录就是基于tmpfs的，所以这个目录不在硬盘上，而是在内存里。因此在linux下，就不需要大费周折去建ramdisk，直接使用-dev-shm-就可达到很好的优化效果。默认系统就会加载-dev-shm-需要注意的是Linux默认-CentOS-dev-shm分区的大小是系统物理内存的50-。"><a href="#2-使用-dev-shm-，-dev-shm-是linux下一个非常有用的目录，这个目录就是基于tmpfs的，所以这个目录不在硬盘上，而是在内存里。因此在linux下，就不需要大费周折去建ramdisk，直接使用-dev-shm-就可达到很好的优化效果。默认系统就会加载-dev-shm-需要注意的是Linux默认-CentOS-dev-shm分区的大小是系统物理内存的50-。" class="headerlink" title="2. 使用/dev/shm ，/dev/shm/是linux下一个非常有用的目录，这个目录就是基于tmpfs的，所以这个目录不在硬盘上，而是在内存里。因此在linux下，就不需要大费周折去建ramdisk，直接使用/dev/shm/就可达到很好的优化效果。默认系统就会加载/dev/shm(需要注意的是Linux默认(CentOS)/dev/shm分区的大小是系统物理内存的50%)。"></a>2. 使用/dev/shm ，/dev/shm/是linux下一个非常有用的目录，这个目录就是基于tmpfs的，所以这个目录不在硬盘上，而是在内存里。因此在linux下，就不需要大费周折去建ramdisk，直接使用/dev/shm/就可达到很好的优化效果。默认系统就会加载/dev/shm(需要注意的是Linux默认(CentOS)/dev/shm分区的大小是系统物理内存的50%)。</h5><p>首先为了防止tmpfs使用全部内存，在这里我们使用mount命令限制/dev/shm的大小为1G，以及提高inode数量(默认的inode数量很低一般都要调高些) 命令如下：</p><h6 id="mount-o-size-1G-o-nr-inodes-1000000-o-remount-dev-shm"><a href="#mount-o-size-1G-o-nr-inodes-1000000-o-remount-dev-shm" class="headerlink" title="mount -o size=1G -o nr_inodes=1000000  -o remount /dev/shm"></a>mount -o size=1G -o nr_inodes=1000000  -o remount /dev/shm</h6><p>然后我们在/dev/shm下建个test文件夹，然后bind到/tmp，如下</p><p>　　###### mkdir /dev/shm/test</p><p>　　###### chmod 1777 /dev/shm/test</p><p>　　###### mount –bind /dev/shm/test /tmp（–bind ）</p><p>　　在使用mount –bind olderdir newerdir命令来挂载一个目录到另一个目录后，newerdir的权限和所有者等所有信息会发生变化。挂载后的目录继承了被挂载目录的所有属性</p><p>更改fstab，使/dev/shm在系统启动时默认挂载的大小为1G</p><h6 id="root-huazq-vi-etc-fstab"><a href="#root-huazq-vi-etc-fstab" class="headerlink" title="[root@huazq ~]# vi /etc/fstab"></a>[root@huazq ~]# vi /etc/fstab</h6><h6 id="tmpfs-dev-shm-tmpfs-defaults-size-1G-0-0"><a href="#tmpfs-dev-shm-tmpfs-defaults-size-1G-0-0" class="headerlink" title="tmpfs                   /dev/shm                tmpfs   defaults,size=1G        0 0"></a>tmpfs                   /dev/shm                tmpfs   defaults,size=1G        0 0</h6><h6 id="sysfs-sys-sysfs-defaults-0-0"><a href="#sysfs-sys-sysfs-defaults-0-0" class="headerlink" title="sysfs                   /sys                    sysfs   defaults                       0 0"></a>sysfs                   /sys                    sysfs   defaults                       0 0</h6><h6 id="proc-proc-proc-defaults-0-0"><a href="#proc-proc-proc-defaults-0-0" class="headerlink" title="proc                    /proc                   proc    defaults                       0 0"></a>proc                    /proc                   proc    defaults                       0 0</h6><h6 id="dev-sda1-swap-swap-defaults-0-0"><a href="#dev-sda1-swap-swap-defaults-0-0" class="headerlink" title="/dev/sda1               swap                    swap    defaults                      0 0"></a>/dev/sda1               swap                    swap    defaults                      0 0</h6>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、-什么是tmpfs&quot;&gt;&lt;a href=&quot;#一、-什么是tmpfs&quot; class=&quot;headerlink&quot; title=&quot;一、 什么是tmpfs&quot;&gt;&lt;/a&gt;一、 什么是tmpfs&lt;/h1&gt;&lt;p&gt;tmpfs是一种基于内存的文件系统，和ramdisk比较类似，但不同
      
    
    </summary>
    
      <category term="文件系统" scheme="https://huazq.github.io/categories/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="https://huazq.github.io/2019/08/07/Markdown%E8%AF%AD%E6%B3%95/"/>
    <id>https://huazq.github.io/2019/08/07/Markdown语法/</id>
    <published>2019-08-07T09:08:00.000Z</published>
    <updated>2019-08-12T02:05:41.824Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Markdown是一种轻量级的「标记语言」</strong></p><p><img src="https://www.mdeditor.com/images/logos/markdown.png" alt="markdown" title="markdown"></p><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面，Markdown文件的后缀名便是“.md”</p><h2 id="MdEditor是一个在线编辑Markdown文档的编辑器"><a href="#MdEditor是一个在线编辑Markdown文档的编辑器" class="headerlink" title="MdEditor是一个在线编辑Markdown文档的编辑器"></a>MdEditor是一个在线编辑Markdown文档的编辑器</h2><p><em>MdEditor扩展了Markdown的功能（如表格、脚注、内嵌HTML等等），以使让Markdown转换成更多的格式，和更丰富的展示效果，这些功能原初的Markdown尚不具备。</em></p><blockquote><p>Markdown增强版中比较有名的有Markdown Extra、MultiMarkdown、 Maruku等。这些衍生版本要么基于工具，如<del>Pandoc</del>，Pandao；要么基于网站，如GitHub和Wikipedia，在语法上基本兼容，但在一些语法和渲染效果上有改动。</p></blockquote><p>MdEditor源于Pandao的JavaScript开源项目，开源地址<a href="https://github.com/pandao/editor.md" title="Editor.md" target="_blank" rel="noopener">Editor.md</a>，并在MIT开源协议的许可范围内进行了优化，以适应广大用户群体的需求。向优秀的markdown开源编辑器原作者Pandao致敬。</p><p><img src="https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png" alt="Pandao editor.md" title="Pandao editor.md"></p><h2 id="MdEditor的功能列表演示"><a href="#MdEditor的功能列表演示" class="headerlink" title="MdEditor的功能列表演示"></a>MdEditor的功能列表演示</h2><h1 id="标题H1"><a href="#标题H1" class="headerlink" title="标题H1"></a>标题H1</h1><h2 id="标题H2"><a href="#标题H2" class="headerlink" title="标题H2"></a>标题H2</h2><h3 id="标题H3"><a href="#标题H3" class="headerlink" title="标题H3"></a>标题H3</h3><h4 id="标题H4"><a href="#标题H4" class="headerlink" title="标题H4"></a>标题H4</h4><h5 id="标题H5"><a href="#标题H5" class="headerlink" title="标题H5"></a>标题H5</h5><h6 id="标题H5-1"><a href="#标题H5-1" class="headerlink" title="标题H5"></a>标题H5</h6><h3 id="字符效果和横线等"><a href="#字符效果和横线等" class="headerlink" title="字符效果和横线等"></a>字符效果和横线等</h3><hr><p><del>删除线</del> <s>删除线（开启识别HTML标签时）</s></p><p><em>斜体字</em>      <em>斜体字</em></p><p><strong>粗体</strong>  <strong>粗体</strong></p><p><strong><em>粗斜体</em></strong> <strong><em>粗斜体</em></strong></p><p>上标：X<sub>2</sub>，下标：O<sup>2</sup></p><p><strong>缩写(同HTML的abbr标签)</strong></p><blockquote><p>即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启</p></blockquote><p>The <abbr title="Hyper Text Markup Language">HTML</abbr> specification is maintained by the <abbr title="World Wide Web Consortium">W3C</abbr>.</p><h3 id="引用-Blockquotes"><a href="#引用-Blockquotes" class="headerlink" title="引用 Blockquotes"></a>引用 Blockquotes</h3><blockquote><p>引用文本 Blockquotes</p></blockquote><p>引用的行内混合 Blockquotes</p><blockquote><p>引用：如果想要插入空白换行<code>即&lt;br /&gt;标签</code>，在插入处先键入两个以上的空格然后回车即可，<a href="https://www.mdeditor.com/" target="_blank" rel="noopener">普通链接</a>。</p></blockquote><h3 id="锚点与链接-Links"><a href="#锚点与链接-Links" class="headerlink" title="锚点与链接 Links"></a>锚点与链接 Links</h3><p><a href="https://www.mdeditor.com/" target="_blank" rel="noopener">普通链接</a><br><a href="https://www.mdeditor.com/" title="普通链接带标题" target="_blank" rel="noopener">普通链接带标题</a><br>直接链接：<a href="https://www.mdeditor.com" target="_blank" rel="noopener">https://www.mdeditor.com</a><br>[锚点链接][anchor-id]<br>[anchor-id]: <a href="https://www.mdeditor.com/" target="_blank" rel="noopener">https://www.mdeditor.com/</a><br><a href="mailto:test.test@gmail.com" target="_blank" rel="noopener">mailto:test.test@gmail.com</a><br>GFM a-tail link @pandao<br>邮箱地址自动链接 <a href="mailto:test.test@gmail.com" target="_blank" rel="noopener">test.test@gmail.com</a>  <a href="mailto:www@vip.qq.com" target="_blank" rel="noopener">www@vip.qq.com</a></p><blockquote><p>@pandao</p></blockquote><h3 id="多语言代码高亮-Codes"><a href="#多语言代码高亮-Codes" class="headerlink" title="多语言代码高亮 Codes"></a>多语言代码高亮 Codes</h3><h4 id="行内代码-Inline-code"><a href="#行内代码-Inline-code" class="headerlink" title="行内代码 Inline code"></a>行内代码 Inline code</h4><p>执行命令：<code>npm install marked</code></p><h4 id="缩进风格"><a href="#缩进风格" class="headerlink" title="缩进风格"></a>缩进风格</h4><p>即缩进四个空格，也做为实现类似 <code>&lt;pre&gt;</code> 预格式化文本 ( Preformatted Text ) 的功能。</p><pre><code>&lt;?php    echo &quot;Hello world!&quot;;?&gt;</code></pre><p>预格式化文本：</p><pre><code>| First Header  | Second Header || ------------- | ------------- || Content Cell  | Content Cell  || Content Cell  | Content Cell  |</code></pre><h4 id="JS代码"><a href="#JS代码" class="headerlink" title="JS代码"></a>JS代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Hello world!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HTML-代码-HTML-codes"><a href="#HTML-代码-HTML-codes" class="headerlink" title="HTML 代码 HTML codes"></a>HTML 代码 HTML codes</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mate</span> <span class="attr">charest</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"Editor.md, Markdown, Editor"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">            body&#123;font-size:14px;color:#444;font-family: "Microsoft Yahei", Tahoma, "Hiragino Sans GB", Arial;background:#fff;&#125;</span><br><span class="line">            ul&#123;list-style: none;&#125;</span><br><span class="line">            img&#123;border:none;vertical-align: middle;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"text-xxl"</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-green"</span>&gt;</span>Plain text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="图片-Images"><a href="#图片-Images" class="headerlink" title="图片 Images"></a>图片 Images</h3><p>图片加链接 (Image + Link)：</p><p><a href="https://www.mdeditor.com/images/logos/markdown.png" title="markdown" target="_blank" rel="noopener"><img src="https://www.mdeditor.com/images/logos/markdown.png" alt></a></p><blockquote><p>Follow your heart.</p></blockquote><hr><h3 id="列表-Lists"><a href="#列表-Lists" class="headerlink" title="列表 Lists"></a>列表 Lists</h3><h4 id="无序列表（减号）Unordered-Lists"><a href="#无序列表（减号）Unordered-Lists" class="headerlink" title="无序列表（减号）Unordered Lists (-)"></a>无序列表（减号）Unordered Lists (-)</h4><ul><li>列表一</li><li>列表二</li><li>列表三</li></ul><h4 id="无序列表（星号）Unordered-Lists"><a href="#无序列表（星号）Unordered-Lists" class="headerlink" title="无序列表（星号）Unordered Lists (*)"></a>无序列表（星号）Unordered Lists (*)</h4><ul><li>列表一</li><li>列表二</li><li>列表三</li></ul><h4 id="无序列表（加号和嵌套）Unordered-Lists"><a href="#无序列表（加号和嵌套）Unordered-Lists" class="headerlink" title="无序列表（加号和嵌套）Unordered Lists (+)"></a>无序列表（加号和嵌套）Unordered Lists (+)</h4><ul><li>列表一</li><li>列表二<ul><li>列表二-1</li><li>列表二-2</li><li>列表二-3</li></ul></li><li>列表三<ul><li>列表一</li><li>列表二</li><li>列表三</li></ul></li></ul><h4 id="有序列表-Ordered-Lists"><a href="#有序列表-Ordered-Lists" class="headerlink" title="有序列表 Ordered Lists (-)"></a>有序列表 Ordered Lists (-)</h4><ol><li>第一行</li><li>第二行</li><li>第三行</li></ol><h4 id="GFM-task-list"><a href="#GFM-task-list" class="headerlink" title="GFM task list"></a>GFM task list</h4><ul><li><input checked disabled type="checkbox"> GFM task list 1</li><li><input checked disabled type="checkbox"> GFM task list 2</li><li><input disabled type="checkbox"> GFM task list 3<ul><li><input disabled type="checkbox"> GFM task list 3-1</li><li><input disabled type="checkbox"> GFM task list 3-2</li><li><input disabled type="checkbox"> GFM task list 3-3</li></ul></li><li><input disabled type="checkbox"> GFM task list 4<ul><li><input disabled type="checkbox"> GFM task list 4-1</li><li><input disabled type="checkbox"> GFM task list 4-2</li></ul></li></ul><hr><h3 id="绘制表格-Tables"><a href="#绘制表格-Tables" class="headerlink" title="绘制表格 Tables"></a>绘制表格 Tables</h3><table><thead><tr><th>项目</th><th align="right">价格</th><th align="center">数量</th></tr></thead><tbody><tr><td>计算机</td><td align="right">$1600</td><td align="center">5</td></tr><tr><td>手机</td><td align="right">$12</td><td align="center">12</td></tr><tr><td>管线</td><td align="right">$1</td><td align="center">234</td></tr></tbody></table><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>Content Cell</td><td>Content Cell</td></tr><tr><td>Content Cell</td><td>Content Cell</td></tr></tbody></table><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>Content Cell</td><td>Content Cell</td></tr><tr><td>Content Cell</td><td>Content Cell</td></tr></tbody></table><table><thead><tr><th>Function name</th><th>Description</th></tr></thead><tbody><tr><td><code>help()</code></td><td>Display the help window.</td></tr><tr><td><code>destroy()</code></td><td><strong>Destroy your computer!</strong></td></tr></tbody></table><table><thead><tr><th align="left">Left-Aligned</th><th align="center">Center Aligned</th><th align="right">Right Aligned</th></tr></thead><tbody><tr><td align="left">col 3 is</td><td align="center">some wordy text</td><td align="right">$1600</td></tr><tr><td align="left">col 2 is</td><td align="center">centered</td><td align="right">$12</td></tr><tr><td align="left">zebra stripes</td><td align="center">are neat</td><td align="right">$1</td></tr></tbody></table><table><thead><tr><th>Item</th><th align="right">Value</th></tr></thead><tbody><tr><td>Computer</td><td align="right">$1600</td></tr><tr><td>Phone</td><td align="right">$12</td></tr><tr><td>Pipe</td><td align="right">$1</td></tr></tbody></table><hr><h4 id="特殊符号-HTML-Entities-Codes"><a href="#特殊符号-HTML-Entities-Codes" class="headerlink" title="特殊符号 HTML Entities Codes"></a>特殊符号 HTML Entities Codes</h4><p>&copy; &amp;  &uml; &trade; &iexcl; &pound;<br>&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot;</p><p>X&sup2; Y&sup3; &frac34; &frac14;  &times;  &divide;   &raquo;</p><p>18&ordm;C  &quot;  &apos;</p><p>[========]</p><h3 id="Emoji表情-smiley"><a href="#Emoji表情-smiley" class="headerlink" title="Emoji表情 :smiley:"></a>Emoji表情 :smiley:</h3><blockquote><p>Blockquotes :star:</p></blockquote><h4 id="GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x"><a href="#GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x" class="headerlink" title="GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:"></a>GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:</h4><ul><li><input checked disabled type="checkbox"> :smiley: @mentions, :smiley: #refs, <a href>links</a>, <strong>formatting</strong>, and <del>tags</del> supported :editormd-logo:;</li><li><input checked disabled type="checkbox"> list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;</li><li><input checked disabled type="checkbox"> [ ] :smiley: this is a complete item :smiley:;</li><li><input disabled type="checkbox"> []this is an incomplete item <a href="#">test link</a> :fa-star: @pandao;</li><li><input disabled type="checkbox"> [ ]this is an incomplete item :fa-star: :fa-gear:;<ul><li><input disabled type="checkbox"> :smiley: this is an incomplete item <a href="#">test link</a> :fa-star: :fa-gear:;</li><li><input disabled type="checkbox"> :smiley: this is  :fa-star: :fa-gear: an incomplete item <a href="#">test link</a>;</li></ul></li></ul><h4 id="反斜杠-Escape"><a href="#反斜杠-Escape" class="headerlink" title="反斜杠 Escape"></a>反斜杠 Escape</h4><p>*literal asterisks*</p><p>[========]</p><h3 id="科学公式-TeX-KaTeX"><a href="#科学公式-TeX-KaTeX" class="headerlink" title="科学公式 TeX(KaTeX)"></a>科学公式 TeX(KaTeX)</h3><p>$$E=mc^2$$</p><p>行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。</p><p>$$x &gt; y$$</p><p>$$(\sqrt{3x-1}+(1+x)^2)$$</p><p>$$\sin(\alpha)^{\theta}=\sum_{i=0}^{n}(x^i + \cos(f))$$</p><p>多行公式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\displaystyle</span><br><span class="line">\left( \sum\_&#123;k=1&#125;^n a\_k b\_k \right)^2</span><br><span class="line">\leq</span><br><span class="line">\left( \sum\_&#123;k=1&#125;^n a\_k^2 \right)</span><br><span class="line">\left( \sum\_&#123;k=1&#125;^n b\_k^2 \right)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">\displaystyle</span><br><span class="line">    \frac&#123;1&#125;&#123;</span><br><span class="line">        \Bigl(\sqrt&#123;\phi \sqrt&#123;5&#125;&#125;-\phi\Bigr) e^&#123;</span><br><span class="line">        \frac25 \pi&#125;&#125; = 1+\frac&#123;e^&#123;-2\pi&#125;&#125; &#123;1+\frac&#123;e^&#123;-4\pi&#125;&#125; &#123;</span><br><span class="line">        1+\frac&#123;e^&#123;-6\pi&#125;&#125;</span><br><span class="line">        &#123;1+\frac&#123;e^&#123;-8\pi&#125;&#125;</span><br><span class="line">         &#123;1+\cdots&#125; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f(x) = \int_&#123;-\infty&#125;^\infty</span><br><span class="line">    \hat f(\xi)\,e^&#123;2 \pi i \xi x&#125;</span><br><span class="line">    \,d\xi</span><br></pre></td></tr></table></figure><h3 id="分页符-Page-break"><a href="#分页符-Page-break" class="headerlink" title="分页符 Page break"></a>分页符 Page break</h3><blockquote><p>Print Test: Ctrl + P</p></blockquote><p>[========]</p><h3 id="绘制流程图-Flowchart"><a href="#绘制流程图-Flowchart" class="headerlink" title="绘制流程图 Flowchart"></a>绘制流程图 Flowchart</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 用户登陆</span><br><span class="line">op=&gt;operation: 登陆操作</span><br><span class="line">cond=&gt;condition: 登陆成功 Yes or No?</span><br><span class="line">e=&gt;end: 进入后台</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><p>[========]</p><h3 id="绘制序列图-Sequence-Diagram"><a href="#绘制序列图-Sequence-Diagram" class="headerlink" title="绘制序列图 Sequence Diagram"></a>绘制序列图 Sequence Diagram</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Andrew-&gt;China: Says Hello</span><br><span class="line">Note right of China: China thinks\nabout it</span><br><span class="line">China--&gt;Andrew: How are you?</span><br><span class="line">Andrew-&gt;&gt;China: I am good thanks!</span><br></pre></td></tr></table></figure><h3 id="End"><a href="#End" class="headerlink" title="End"></a>End</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Markdown是一种轻量级的「标记语言」&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.mdeditor.com/images/logos/markdown.png&quot; alt=&quot;markdown&quot; title=&quot;markdow
      
    
    </summary>
    
      <category term="杂类" scheme="https://huazq.github.io/categories/%E6%9D%82%E7%B1%BB/"/>
    
    
  </entry>
  
</feed>
